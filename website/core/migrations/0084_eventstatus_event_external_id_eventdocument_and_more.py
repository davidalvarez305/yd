# Generated by Django 5.1.7 on 2025-10-19 03:13

import uuid
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models, transaction


def generate_uuid():
    return uuid.uuid4()


def fix_duplicate_external_ids(apps, schema_editor):
    Event = apps.get_model("core", "Event")
    with transaction.atomic():
        events = list(Event.objects.all().only("event_id", "external_id"))
        seen = set()
        for event in events:
            if not event.external_id or event.external_id in seen:
                event.external_id = uuid.uuid4()
                event.save(update_fields=["external_id"])
            seen.add(event.external_id)


def create_default_event_statuses(apps, schema_editor):
    EventStatus = apps.get_model("core", "EventStatus")
    statuses = [
        "Booked",
        "Onboarding",
        "Awaiting Client Confirmation",
        "Confirmed",
        "Awaiting Staff Assignment",
        "Onboarding Completed",
        "In Progress",
        "Extended",
        "Service Completed",
    ]

    for status in statuses:
        EventStatus.objects.get_or_create(status=status)


class Migration(migrations.Migration):

    dependencies = [
        ("core", "0083_quoteservicechangehistory_quote"),
    ]

    operations = [
        migrations.CreateModel(
            name="EventStatus",
            fields=[
                ("event_status_id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("Booked", "Booked"),
                            ("Onboarding", "Onboarding"),
                            ("Awaiting Client Confirmation", "Awaiting Client Confirmation"),
                            ("Confirmed", "Confirmed"),
                            ("Awaiting Staff Assignment", "Awaiting Staff Assignment"),
                            ("Onboarding Completed", "Onboarding Completed"),
                            ("In Progress", "In Progress"),
                            ("Extended", "Extended"),
                            ("Service Completed", "Service Completed"),
                        ],
                        max_length=60,
                    ),
                ),
            ],
            options={"db_table": "event_status"},
        ),
        migrations.AddField(
            model_name="event",
            name="external_id",
            field=models.UUIDField(
                db_index=True,
                default=generate_uuid,
                editable=False,
            ),
        ),
        migrations.CreateModel(
            name="EventDocument",
            fields=[
                ("event_document_id", models.AutoField(primary_key=True, serialize=False)),
                ("document", models.FileField(upload_to="documents/")),
                (
                    "event",
                    models.ForeignKey(
                        db_column="event_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="documents",
                        to="core.event",
                    ),
                ),
            ],
            options={"db_table": "event_document"},
        ),
        migrations.CreateModel(
            name="EventStatusHistory",
            fields=[
                ("event_status_history_id", models.AutoField(primary_key=True, serialize=False)),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                (
                    "event",
                    models.ForeignKey(
                        db_column="event_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="statuses",
                        to="core.event",
                    ),
                ),
                (
                    "event_status",
                    models.ForeignKey(
                        db_column="event_status_id",
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="core.eventstatus",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        db_column="user_id",
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={"db_table": "event_status_history"},
        ),
        migrations.RunPython(create_default_event_statuses, reverse_code=migrations.RunPython.noop),
        migrations.RunPython(fix_duplicate_external_ids, reverse_code=migrations.RunPython.noop),
    ]